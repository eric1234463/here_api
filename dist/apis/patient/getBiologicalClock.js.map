{"version":3,"sources":["../../../src/apis/patient/getBiologicalClock.js"],"names":["getBiologicalClock","req","res","next","query","type","undefined","status","patientBiologicalClock","count","where","patientId","date","then","clock","json","findAll","createdAt","$between","from","to","dates","jsonData","map","sleepData","reduce","arr","collectionElement","time","remainder","minute","roundUpTime","add","hours","tz","format","push","wakeData","result","label","data"],"mappings":";;;;;kBAGwBA,kB;;AAHxB;;;;AACA;;;;AACA;;;;;;AACe,SAASA,kBAAT,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4C;AACvD,QAAIF,IAAIG,KAAJ,CAAUC,IAAV,IAAkBC,SAAtB,EAAiC;AAC7B,YAAIC,SAAS,KAAb;AACA,yBAAOC,sBAAP,CACKC,KADL,CACW;AACHC,mBAAO;AACHL,sBAAMJ,IAAIG,KAAJ,CAAUC,IADb;AAEHM,2BAAWV,IAAIG,KAAJ,CAAUO,SAFlB;AAGHC,sBAAMX,IAAIG,KAAJ,CAAUQ;AAHb;AADJ,SADX,EAOOC,IAPP,CAOY,iBAAS;AACb,gBAAIC,SAAS,CAAb,EAAgB;AACZP,yBAAS,IAAT;AACH;AACDL,gBAAIa,IAAJ,CAAS,EAAER,cAAF,EAAT;AACH,SAZL;AAaH,KAfD,MAeO;AACH,yBAAOC,sBAAP,CACKQ,OADL,CACa;AACLN,mBAAO;AACHC,2BAAWV,IAAIG,KAAJ,CAAUO,SADlB;AAEHM,2BAAW;AACPC,8BAAU,CAACjB,IAAIG,KAAJ,CAAUe,IAAX,EAAiBlB,IAAIG,KAAJ,CAAUgB,EAA3B;AADH;AAFR;AADF,SADb,EAQOP,IARP,CAQY,UAACQ,KAAD,EAAW;AACf,gBAAMC,WAAW,iBAAEC,GAAF,CAAMF,KAAN,EAAa,YAAb,CAAjB;AACA,gBAAMG,YAAYF,SAASG,MAAT,CAAgB,UAACC,GAAD,EAAMC,iBAAN,EAA4B;AAC1D,oBAAIA,kBAAkBtB,IAAlB,IAA0B,OAA9B,EAAuC;AACnC,wBAAMuB,OAAO,8BAAOD,kBAAkBV,SAAzB,CAAb;AACA,wBAAMY,YAAY,KAAKD,KAAKE,MAAL,KAAgB,EAAvC;AACA,wBAAMC,cAAc,8BAAOH,IAAP,EAAaI,GAAb,CAAiB,SAAjB,EAA4BH,SAA5B,EAAuCI,KAAvC,GAA+CC,EAA/C,CAAkD,gBAAlD,EAAoEC,MAApE,EAApB;AACAT,wBAAIU,IAAJ,CAASL,WAAT;AACH;AACD,uBAAOL,GAAP;AACH,aARiB,EAQf,EARe,CAAlB;AASA,gBAAMW,WAAWf,SAASG,MAAT,CAAgB,UAACC,GAAD,EAAMC,iBAAN,EAA4B;AACzD,oBAAIA,kBAAkBtB,IAAlB,IAA0B,MAA9B,EAAsC;AAClC,wBAAMuB,OAAO,8BAAOD,kBAAkBV,SAAzB,CAAb;AACA,wBAAMY,YAAY,KAAKD,KAAKE,MAAL,KAAgB,EAAvC;AACA,wBAAMC,cAAc,8BAAOH,IAAP,EAAaI,GAAb,CAAiB,SAAjB,EAA4BH,SAA5B,EAAuCI,KAAvC,GAA+CC,EAA/C,CAAkD,gBAAlD,EAAoEC,MAApE,EAApB;AACAT,wBAAIU,IAAJ,CAASL,WAAT;AACH;AACD,uBAAOL,GAAP;AACH,aARgB,EAQd,EARc,CAAjB;;AAUA,gBAAMY,SAAS,CAAC;AACZC,uBAAO,OADK;AAEZC,sBAAMhB;AAFM,aAAD,EAGZ;AACCe,uBAAO,MADR;AAECC,sBAAMH;AAFP,aAHY,CAAf;AAOAnC,gBAAIa,IAAJ,CAASuB,MAAT;AACH,SArCL;AAsCH;AACJ","file":"getBiologicalClock.js","sourcesContent":["import models from '../../../models';\nimport _ from 'lodash';\nimport moment from 'moment-timezone';\nexport default function getBiologicalClock(req, res, next) {\n    if (req.query.type != undefined) {\n        let status = false;\n        models.patientBiologicalClock\n            .count({\n                where: {\n                    type: req.query.type,\n                    patientId: req.query.patientId,\n                    date: req.query.date\n                }\n            }).then(clock => {\n                if (clock != 0) {\n                    status = true\n                }\n                res.json({ status });\n            })\n    } else {\n        models.patientBiologicalClock\n            .findAll({\n                where: {\n                    patientId: req.query.patientId,\n                    createdAt: {\n                        $between: [req.query.from, req.query.to]\n                    }\n                },\n            }).then((dates) => {\n                const jsonData = _.map(dates, 'dataValues');\n                const sleepData = jsonData.reduce((arr, collectionElement) => {\n                    if (collectionElement.type == 'SLEEP') {\n                        const time = moment(collectionElement.createdAt);\n                        const remainder = 30 - time.minute() % 30;\n                        const roundUpTime = moment(time).add(\"minutes\", remainder).hours().tz(\"Asia/Hong_Kong\").format();\n                        arr.push(roundUpTime);\n                    }\n                    return arr;\n                }, [])\n                const wakeData = jsonData.reduce((arr, collectionElement) => {\n                    if (collectionElement.type == 'WAKE') {\n                        const time = moment(collectionElement.createdAt);\n                        const remainder = 30 - time.minute() % 30;\n                        const roundUpTime = moment(time).add(\"minutes\", remainder).hours().tz(\"Asia/Hong_Kong\").format();\n                        arr.push(roundUpTime);\n                    }\n                    return arr;\n                }, [])\n\n                const result = [{\n                    label: 'SLEEP',\n                    data: sleepData\n                }, {\n                    label: 'WAKE',\n                    data: wakeData\n                }];\n                res.json(result);\n            });\n    }\n}\n"]}