{"version":3,"sources":["../../../src/apis/patient/getBiologicalClock.js"],"names":["getBiologicalClock","req","res","next","query","type","undefined","status","patientBiologicalClock","count","where","patientId","date","then","clock","json","dateArray","sleepArray","wakeArray","start","Date","from","end","to","push","getTime","newDate","setDate","getDate","findAll","createdAt","$between","dates","jsonData","map","dataArr","forEach","collectionElement","index","findIndex","x","time","dateTime","tz","remainder","minute","roundUpTime","add","hours","result","label","data"],"mappings":";;;;;kBAGwBA,kB;;AAHxB;;;;AACA;;;;AACA;;;;;;AACe,SAASA,kBAAT,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4C;AACvD,QAAIF,IAAIG,KAAJ,CAAUC,IAAV,IAAkBC,SAAtB,EAAiC;AAC7B,YAAIC,SAAS,KAAb;AACA,yBAAOC,sBAAP,CACKC,KADL,CACW;AACHC,mBAAO;AACHL,sBAAMJ,IAAIG,KAAJ,CAAUC,IADb;AAEHM,2BAAWV,IAAIG,KAAJ,CAAUO,SAFlB;AAGHC,sBAAMX,IAAIG,KAAJ,CAAUQ;AAHb;AADJ,SADX,EAOOC,IAPP,CAOY,iBAAS;AACb,gBAAIC,SAAS,CAAb,EAAgB;AACZP,yBAAS,IAAT;AACH;AACDL,gBAAIa,IAAJ,CAAS,EAAER,cAAF,EAAT;AACH,SAZL;AAaH,KAfD,MAeO;AACH,YAAIS,YAAY,EAAhB;AACA,YAAIC,aAAa,EAAjB;AACA,YAAIC,YAAY,EAAhB;AACA,YAAIC,QAAQ,IAAIC,IAAJ,CAASnB,IAAIG,KAAJ,CAAUiB,IAAnB,CAAZ;AACA,YAAIC,MAAM,IAAIF,IAAJ,CAASnB,IAAIG,KAAJ,CAAUmB,EAAnB,CAAV;;AAEA,eAAOJ,SAASG,GAAhB,EAAqB;AACjBN,sBAAUQ,IAAV,CAAeL,MAAMM,OAAN,EAAf;AACAR,uBAAWO,IAAX,CAAgB,CAAhB;AACAN,sBAAUM,IAAV,CAAe,CAAf;AACA,gBAAIE,UAAUP,MAAMQ,OAAN,CAAcR,MAAMS,OAAN,KAAkB,CAAhC,CAAd;AACAT,oBAAQ,IAAIC,IAAJ,CAASM,OAAT,CAAR;AACH;;AAED,yBAAOlB,sBAAP,CACKqB,OADL,CACa;AACLnB,mBAAO;AACHC,2BAAWV,IAAIG,KAAJ,CAAUO,SADlB;AAEHmB,2BAAW;AACPC,8BAAU,CAAC9B,IAAIG,KAAJ,CAAUiB,IAAX,EAAiBpB,IAAIG,KAAJ,CAAUmB,EAA3B;AADH;AAFR;AADF,SADb,EAQOV,IARP,CAQY,UAACmB,KAAD,EAAW;AACf,gBAAMC,WAAW,iBAAEC,GAAF,CAAMF,KAAN,EAAa,YAAb,CAAjB;AACA,gBAAMG,UAAUF,SAASG,OAAT,CAAiB,6BAAqB;AAClD,oBAAIxB,OAAO,IAAIQ,IAAJ,CAASiB,kBAAkBzB,IAA3B,EAAiCa,OAAjC,EAAX;AACA,oBAAIa,QAAQtB,UAAUuB,SAAV,CAAoB;AAAA,2BAAKC,KAAK5B,IAAV;AAAA,iBAApB,CAAZ;AACA,oBAAM6B,OAAO,8BAAOJ,kBAAkBK,QAAzB,EAAmCC,EAAnC,CAAsC,gBAAtC,CAAb;AACA,oBAAMC,YAAY,KAAKH,KAAKI,MAAL,KAAgB,EAAvC;AACA,oBAAMC,cAAc,8BAAOL,IAAP,EAAaM,GAAb,CAAiBH,SAAjB,EAA4B,SAA5B,EAAuCI,KAAvC,EAApB;AACA,oBAAIX,kBAAkBhC,IAAlB,IAA0B,OAA9B,EAAuC;AACnCY,+BAAWqB,KAAX,IAAoBQ,WAApB;AACH,iBAFD,MAEO;AACH5B,8BAAUoB,KAAV,IAAmBQ,WAAnB;AACH;AACJ,aAXe,CAAhB;AAYA,gBAAMG,SAAS,CAAC;AACZC,uBAAO,OADK;AAEZC,sBAAMlC;AAFM,aAAD,EAGZ;AACCiC,uBAAO,MADR;AAECC,sBAAMjC;AAFP,aAHY,CAAf;AAOAhB,gBAAIa,IAAJ,CAASkC,MAAT;AACH,SA9BL;AA+BH;AACJ","file":"getBiologicalClock.js","sourcesContent":["import models from '../../../models';\nimport _ from 'lodash';\nimport moment from 'moment-timezone';\nexport default function getBiologicalClock(req, res, next) {\n    if (req.query.type != undefined) {\n        let status = false;\n        models.patientBiologicalClock\n            .count({\n                where: {\n                    type: req.query.type,\n                    patientId: req.query.patientId,\n                    date: req.query.date\n                }\n            }).then(clock => {\n                if (clock != 0) {\n                    status = true\n                }\n                res.json({ status });\n            })\n    } else {\n        let dateArray = [];\n        let sleepArray = [];\n        let wakeArray = [];\n        let start = new Date(req.query.from);\n        let end = new Date(req.query.to);\n\n        while (start <= end) {\n            dateArray.push(start.getTime());\n            sleepArray.push(0);\n            wakeArray.push(0);\n            let newDate = start.setDate(start.getDate() + 1);\n            start = new Date(newDate);\n        }\n\n        models.patientBiologicalClock\n            .findAll({\n                where: {\n                    patientId: req.query.patientId,\n                    createdAt: {\n                        $between: [req.query.from, req.query.to]\n                    }\n                },\n            }).then((dates) => {\n                const jsonData = _.map(dates, 'dataValues');\n                const dataArr = jsonData.forEach(collectionElement => {\n                    let date = new Date(collectionElement.date).getTime();\n                    let index = dateArray.findIndex(x => x == date);\n                    const time = moment(collectionElement.dateTime).tz(\"Asia/Hong_Kong\");\n                    const remainder = 30 - time.minute() % 30;\n                    const roundUpTime = moment(time).add(remainder, \"minutes\").hours();\n                    if (collectionElement.type == 'SLEEP') {\n                        sleepArray[index] = roundUpTime;\n                    } else {\n                        wakeArray[index] = roundUpTime;\n                    }   \n                });\n                const result = [{\n                    label: 'SLEEP',\n                    data: sleepArray\n                }, {\n                    label: 'WAKE',\n                    data: wakeArray\n                }];\n                res.json(result);\n            });\n    }\n}\n"]}