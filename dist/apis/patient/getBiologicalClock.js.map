{"version":3,"sources":["../../../src/apis/patient/getBiologicalClock.js"],"names":["getBiologicalClock","req","res","next","patientBiologicalClock","findAll","where","patientId","query","createdAt","$between","from","to","then","dates","jsonData","map","sleepData","reduce","arr","collectionElement","type","time","remainder","minute","roundUpTime","add","hours","push","wakeData","result","label","data","json"],"mappings":";;;;;kBAGwBA,kB;;AAHxB;;;;AACA;;;;AACA;;;;;;AACe,SAASA,kBAAT,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4C;AACvD,qBAAOC,sBAAP,CACKC,OADL,CACa;AACLC,eAAO;AACHC,uBAAWN,IAAIO,KAAJ,CAAUD,SADlB;AAEHE,uBAAW;AACPC,0BAAU,CAACT,IAAIO,KAAJ,CAAUG,IAAX,EAAiBV,IAAIO,KAAJ,CAAUI,EAA3B;AADH;AAFR;AADF,KADb,EAQOC,IARP,CAQY,UAACC,KAAD,EAAW;AACf,YAAMC,WAAW,iBAAEC,GAAF,CAAMF,KAAN,EAAa,YAAb,CAAjB;AACA,YAAMG,YAAYF,SAASG,MAAT,CAAgB,UAACC,GAAD,EAAMC,iBAAN,EAA4B;AAC1D,gBAAIA,kBAAkBC,IAAlB,IAA0B,OAA9B,EAAuC;AACnC,oBAAMC,OAAO,sBAAOF,kBAAkBX,SAAzB,CAAb;AACA,oBAAMc,YAAY,KAAKD,KAAKE,MAAL,KAAgB,EAAvC;AACA,oBAAMC,cAAc,sBAAOH,IAAP,EAAaI,GAAb,CAAiB,SAAjB,EAA4BH,SAA5B,EAAuCI,KAAvC,EAApB;AACAR,oBAAIS,IAAJ,CAASH,WAAT;AACH;AACD,mBAAON,GAAP;AACH,SARiB,EAQf,EARe,CAAlB;AASA,YAAMU,WAAWd,SAASG,MAAT,CAAgB,UAACC,GAAD,EAAMC,iBAAN,EAA4B;AACzD,gBAAIA,kBAAkBC,IAAlB,IAA0B,MAA9B,EAAsC;AAClC,oBAAMC,OAAO,sBAAOF,kBAAkBX,SAAzB,CAAb;AACA,oBAAMc,YAAY,KAAKD,KAAKE,MAAL,KAAgB,EAAvC;AACA,oBAAMC,cAAc,sBAAOH,IAAP,EAAaI,GAAb,CAAiB,SAAjB,EAA4BH,SAA5B,EAAuCI,KAAvC,EAApB,CAAmE;AACnER,oBAAIS,IAAJ,CAASH,WAAT;AACH;AACD,mBAAON,GAAP;AACH,SARgB,EAQd,EARc,CAAjB;;AAUA,YAAMW,SAAS,CAAC;AACZC,mBAAO,OADK;AAEZC,kBAAMf;AAFM,SAAD,EAGZ;AACCc,mBAAO,MADR;AAECC,kBAAMH;AAFP,SAHY,CAAf;AAOA3B,YAAI+B,IAAJ,CAASH,MAAT;AACH,KArCL;AAsCH","file":"getBiologicalClock.js","sourcesContent":["import models from '../../../models';\nimport _ from 'lodash';\nimport moment from 'moment';\nexport default function getBiologicalClock(req, res, next) {\n    models.patientBiologicalClock\n        .findAll({\n            where: {\n                patientId: req.query.patientId,\n                createdAt: {\n                    $between: [req.query.from, req.query.to]\n                }\n            },\n        }).then((dates) => {\n            const jsonData = _.map(dates, 'dataValues');\n            const sleepData = jsonData.reduce((arr, collectionElement) => {\n                if (collectionElement.type == 'SLEEP') {\n                    const time = moment(collectionElement.createdAt);\n                    const remainder = 30 - time.minute() % 30;\n                    const roundUpTime = moment(time).add(\"minutes\", remainder).hours();\n                    arr.push(roundUpTime);\n                }\n                return arr;\n            }, [])\n            const wakeData = jsonData.reduce((arr, collectionElement) => {\n                if (collectionElement.type == 'WAKE') {\n                    const time = moment(collectionElement.createdAt);\n                    const remainder = 30 - time.minute() % 30;\n                    const roundUpTime = moment(time).add(\"minutes\", remainder).hours();;\n                    arr.push(roundUpTime);\n                }\n                return arr;\n            }, [])\n\n            const result = [{\n                label: 'SLEEP',\n                data: sleepData\n            }, {\n                label: 'WAKE',\n                data: wakeData\n            }];\n            res.json(result);\n        });\n}\n"]}