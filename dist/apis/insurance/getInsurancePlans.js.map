{"version":3,"sources":["../../../src/apis/insurance/getInsurancePlans.js"],"names":["req","res","next","patientHealthStatus","findAll","where","patientId","query","order","userHealthStatus","userTotalHealthRank","reduce","acc","element","parseInt","dataValues","value","userAvgHealthRank","length","InsurancePlan","insurancePlans","result","map","insuranceUserPlan","insurancePlan","similarity","Math","ceil","rank","sortedResult","sort","a","b","json","getInsurancePlans"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;sFAEe,iBAAiCA,GAAjC,EAAsCC,GAAtC,EAA2CC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkB,iBAAOC,mBAAP,CAA2BC,OAA3B,CAAmC;AAChEC,qBAAO;AACLC,2BAAWN,IAAIO,KAAJ,CAAUD;AADhB,eADyD;AAIhEE,qBAAO,CAAC,CAAC,WAAD,EAAc,MAAd,CAAD;AAJyD,aAAnC,CADlB;;AAAA;AACPC,4BADO;AAQPC,+BARO,GAQeD,iBAAiBE,MAAjB,CAAwB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACpED,qBAAOE,SAASD,QAAQE,UAAR,CAAmBC,KAA5B,CAAP;AACA,qBAAOJ,GAAP;AACD,aAH2B,EAGzB,CAHyB,CARf;AAaPK,6BAbO,GAaaP,sBAAsBD,iBAAiBS,MAbpD;AAAA;AAAA,mBAgBgB,iBAAOC,aAAP,CAAqBf,OAArB,CAA6B;AACxDI,qBAAO,CAAC,CAAC,MAAD,EAAS,MAAT,CAAD,EAAmB,CAAC,IAAD,EAAO,KAAP,CAAnB;AADiD,aAA7B,CAhBhB;;AAAA;AAgBPY,0BAhBO;AAoBPC,kBApBO,GAoBED,eAAeE,GAAf,CAAmB,yBAAiB;AACjD,kBAAMC,+CACDC,cAAcT,UADb;AAEJU,4BAAYC,KAAKC,IAAL,CACVV,oBACEO,cAAcT,UAAd,CAAyBa,IAD3B,GAEE,GAHQ;AAFR,gBAAN;AAQA,qBAAOL,iBAAP;AACD,aAVc,CApBF;AAgCPM,wBAhCO,GAgCQR,OAAOS,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACzC,qBAAOA,EAAEP,UAAF,GAAeM,EAAEN,UAAxB;AACD,aAFoB,CAhCR;;;AAoCbxB,gBAAIgC,IAAJ,CAASJ,YAAT;;AApCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeK,iB;;;;SAAAA,iB","file":"getInsurancePlans.js","sourcesContent":["import models from \"../../../models\";\n\nexport default async function getInsurancePlans(req, res, next) {\n  const userHealthStatus = await models.patientHealthStatus.findAll({\n    where: {\n      patientId: req.query.patientId\n    },\n    order: [[\"createdAt\", \"DESC\"]]\n  });\n\n  const userTotalHealthRank = userHealthStatus.reduce((acc, element) => {\n    acc += parseInt(element.dataValues.value);\n    return acc;\n  }, 0);\n  \n  const userAvgHealthRank = userTotalHealthRank / userHealthStatus.length;\n\n\n  const insurancePlans = await models.InsurancePlan.findAll({\n    order: [[\"rank\", \"DESC\"], [\"id\", \"ASC\"]]\n  });\n\n  const result = insurancePlans.map(insurancePlan => {\n    const insuranceUserPlan = {\n      ...insurancePlan.dataValues,\n      similarity: Math.ceil(\n        userAvgHealthRank /\n          insurancePlan.dataValues.rank *\n          100\n      )\n    };\n    return insuranceUserPlan;\n  });\n\n  const sortedResult = result.sort((a, b) => {\n    return b.similarity - a.similarity;\n  });\n\n  res.json(sortedResult);\n}\n"]}