{"version":3,"sources":["../../../src/apis/insurance/searchInsurancePlans.js"],"names":["req","res","next","body","patientId","userAvgHealthRank","condition","order","where","search","provider","$eq","surgery_cover","$gte","daliy_cover","InsurancePlan","findAll","insurancePlans","result","map","insuranceUserPlan","insurancePlan","dataValues","similarity","Math","ceil","rank","sortedResult","sort","a","b","json","searchInsurancePlans"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;sFAEe,iBAAoCA,GAApC,EAAyCC,GAAzC,EAA8CC,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmB,sCAAuBF,IAAIG,IAAJ,CAASC,SAAhC,CADnB;;AAAA;AACPC,6BADO;AAGTC,qBAHS,GAGG;AACdC,qBAAO,CAAC,CAAC,IAAD,EAAO,KAAP,CAAD,CADO;AAEdC,qBAAO;AAFO,aAHH;;;AAQb,gBAAI,CAAC,CAACR,IAAIG,IAAJ,CAASM,MAAT,CAAgBC,QAAtB,EAAgC;AAC9BJ,wBAAU,OAAV,EAAmB,UAAnB,IAAiC;AAC/BK,qBAAKX,IAAIG,IAAJ,CAASM,MAAT,CAAgBC;AADU,eAAjC;AAGD;;AAED,gBAAI,CAAC,CAACV,IAAIG,IAAJ,CAASM,MAAT,CAAgBG,aAAtB,EAAqC;AACnCN,wBAAU,OAAV,EAAmB,eAAnB,IAAsC;AACpCO,sBAAMb,IAAIG,IAAJ,CAASM,MAAT,CAAgBG;AADc,eAAtC;AAGD;;AAED,gBAAI,CAAC,CAACZ,IAAIG,IAAJ,CAASM,MAAT,CAAgBK,WAAtB,EAAmC;AACjCR,wBAAU,OAAV,EAAmB,aAAnB,IAAoC;AAClCO,sBAAMb,IAAIG,IAAJ,CAASM,MAAT,CAAgBK;AADY,eAApC;AAGD;;AAxBY;AAAA,mBA0BgB,iBAAOC,aAAP,CAAqBC,OAArB,CAA6BV,SAA7B,CA1BhB;;AAAA;AA0BPW,0BA1BO;AA4BPC,kBA5BO,GA4BED,eAAeE,GAAf,CAAmB,yBAAiB;AACjD,kBAAMC,+CACDC,cAAcC,UADb;AAEJC,4BAAYC,KAAKC,IAAL,CACVpB,oBACEgB,cAAcC,UAAd,CAAyBI,IAD3B,GAEE,GAHQ;AAFR,gBAAN;AAQA,qBAAON,iBAAP;AACD,aAVc,CA5BF;AAwCPO,wBAxCO,GAwCQT,OAAOU,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACzC,qBAAOA,EAAEP,UAAF,GAAeM,EAAEN,UAAxB;AACD,aAFoB,CAxCR;;;AA4CbtB,gBAAI8B,IAAJ,CAASJ,YAAT;;AA5Ca;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeK,oB;;;;SAAAA,oB","file":"searchInsurancePlans.js","sourcesContent":["import models from \"../../../models\";\nimport getUserAvgHealthStatus from './getUserAvgHealthStatus';\n\nexport default async function searchInsurancePlans(req, res, next) {\n  const userAvgHealthRank = await getUserAvgHealthStatus(req.body.patientId);\n\n  let condition = {\n    order: [[\"id\", \"ASC\"]],\n    where: {}\n  };\n\n  if (!!req.body.search.provider) {\n    condition[\"where\"][\"provider\"] = {\n      $eq: req.body.search.provider\n    };\n  }\n\n  if (!!req.body.search.surgery_cover) {\n    condition[\"where\"][\"surgery_cover\"] = {\n      $gte: req.body.search.surgery_cover\n    };\n  }\n\n  if (!!req.body.search.daliy_cover) {\n    condition[\"where\"][\"daliy_cover\"] = {\n      $gte: req.body.search.daliy_cover\n    };\n  }\n\n  const insurancePlans = await models.InsurancePlan.findAll(condition);\n\n  const result = insurancePlans.map(insurancePlan => {\n    const insuranceUserPlan = {\n      ...insurancePlan.dataValues,\n      similarity: Math.ceil(\n        userAvgHealthRank /\n          insurancePlan.dataValues.rank *\n          100\n      )\n    };\n    return insuranceUserPlan;\n  });\n\n  const sortedResult = result.sort((a, b) => {\n    return b.similarity - a.similarity;\n  });\n\n  res.json(sortedResult);\n}\n"]}