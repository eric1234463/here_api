{"version":3,"sources":["../../../src/apis/insurance/searchInsurancePlans.js"],"names":["req","res","next","body","patientId","userAvgHealthRank","order","condition","where","sort","push","search","provider","$eq","surgery_cover","$gte","daliy_cover","InsurancePlan","findAll","insurancePlans","result","map","insuranceUserPlan","insurancePlan","dataValues","similarity","Math","ceil","rank","json","sortedResult","searchInsurancePlans"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;sFAEe,iBAAoCA,GAApC,EAAyCC,GAAzC,EAA8CC,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmB,sCAAuBF,IAAIG,IAAJ,CAASC,SAAhC,CADnB;;AAAA;AACPC,6BADO;AAETC,iBAFS,GAED,CAAC,CAAC,IAAD,EAAO,KAAP,CAAD,CAFC;AAGTC,qBAHS,GAGG;AACdD,qBAAOA,KADO;AAEdE,qBAAO;AAFO,aAHH;;;AAQb,gBAAI,CAAC,CAACR,IAAIG,IAAJ,CAASM,IAAf,EAAqB;AACnBF,wBAAUD,KAAV,GAAkB,EAAlB;AACAC,wBAAUD,KAAV,CAAgBI,IAAhB,CAAqBV,IAAIG,IAAJ,CAASM,IAA9B;AACD;;AAED,gBAAI,CAAC,CAACT,IAAIG,IAAJ,CAASQ,MAAT,CAAgBC,QAAtB,EAAgC;AAC9BL,wBAAU,OAAV,EAAmB,UAAnB,IAAiC;AAC/BM,qBAAKb,IAAIG,IAAJ,CAASQ,MAAT,CAAgBC;AADU,eAAjC;AAGD;;AAED,gBAAI,CAAC,CAACZ,IAAIG,IAAJ,CAASQ,MAAT,CAAgBG,aAAtB,EAAqC;AACnCP,wBAAU,OAAV,EAAmB,eAAnB,IAAsC;AACpCQ,sBAAMf,IAAIG,IAAJ,CAASQ,MAAT,CAAgBG;AADc,eAAtC;AAGD;;AAED,gBAAI,CAAC,CAACd,IAAIG,IAAJ,CAASQ,MAAT,CAAgBK,WAAtB,EAAmC;AACjCT,wBAAU,OAAV,EAAmB,aAAnB,IAAoC;AAClCQ,sBAAMf,IAAIG,IAAJ,CAASQ,MAAT,CAAgBK;AADY,eAApC;AAGD;;AA7BY;AAAA,mBA+BgB,iBAAOC,aAAP,CAAqBC,OAArB,CAA6BX,SAA7B,CA/BhB;;AAAA;AA+BPY,0BA/BO;AAiCPC,kBAjCO,GAiCED,eAAeE,GAAf,CAAmB,yBAAiB;AACjD,kBAAMC,+CACDC,cAAcC,UADb;AAEJC,4BAAYC,KAAKC,IAAL,CACVtB,oBACEkB,cAAcC,UAAd,CAAyBI,IAD3B,GAEE,GAHQ;AAFR,gBAAN;AAQA,qBAAON,iBAAP;AACD,aAVc,CAjCF;;;AA6CbrB,gBAAI4B,IAAJ,CAASC,YAAT;;AA7Ca;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,oB;;;;SAAAA,oB","file":"searchInsurancePlans.js","sourcesContent":["import models from \"../../../models\";\nimport getUserAvgHealthStatus from './getUserAvgHealthStatus';\n\nexport default async function searchInsurancePlans(req, res, next) {\n  const userAvgHealthRank = await getUserAvgHealthStatus(req.body.patientId);\n  let order = [[\"id\", \"ASC\"]];\n  let condition = {\n    order: order,\n    where: {}\n  };\n\n  if (!!req.body.sort) {\n    condition.order = [];\n    condition.order.push(req.body.sort);\n  };\n\n  if (!!req.body.search.provider) {\n    condition[\"where\"][\"provider\"] = {\n      $eq: req.body.search.provider\n    };\n  }\n\n  if (!!req.body.search.surgery_cover) {\n    condition[\"where\"][\"surgery_cover\"] = {\n      $gte: req.body.search.surgery_cover\n    };\n  }\n\n  if (!!req.body.search.daliy_cover) {\n    condition[\"where\"][\"daliy_cover\"] = {\n      $gte: req.body.search.daliy_cover\n    };\n  }\n\n  const insurancePlans = await models.InsurancePlan.findAll(condition);\n\n  const result = insurancePlans.map(insurancePlan => {\n    const insuranceUserPlan = {\n      ...insurancePlan.dataValues,\n      similarity: Math.ceil(\n        userAvgHealthRank /\n          insurancePlan.dataValues.rank *\n          100\n      )\n    };\n    return insuranceUserPlan;\n  });\n\n  res.json(sortedResult);\n}\n"]}