{"version":3,"sources":["../../../src/apis/insurance/searchInsurancePlans.js"],"names":["req","res","next","patientHealthStatus","findAll","where","patientId","query","order","userHealthStatus","userTotalHealthRank","reduce","acc","element","parseInt","dataValues","value","userAvgHealthRank","length","condition","body","search","provider","$eq","surgery_cover","$gte","daliy_cover","InsurancePlan","insurancePlans","result","map","insuranceUserPlan","insurancePlan","similarity","Math","ceil","rank","sortedResult","sort","a","b","json","searchInsurancePlans"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;sFAEe,iBAAoCA,GAApC,EAAyCC,GAAzC,EAA8CC,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkB,iBAAOC,mBAAP,CAA2BC,OAA3B,CAAmC;AAChEC,qBAAO;AACLC,2BAAWN,IAAIO,KAAJ,CAAUD;AADhB,eADyD;AAIhEE,qBAAO,CAAC,CAAC,WAAD,EAAc,MAAd,CAAD;AAJyD,aAAnC,CADlB;;AAAA;AACPC,4BADO;AAQPC,+BARO,GAQeD,iBAAiBE,MAAjB,CAAwB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACpED,qBAAOE,SAASD,QAAQE,UAAR,CAAmBC,KAA5B,CAAP;AACA,qBAAOJ,GAAP;AACD,aAH2B,EAGzB,CAHyB,CARf;AAaPK,6BAbO,GAaaP,sBAAsBD,iBAAiBS,MAbpD;AAeTC,qBAfS,GAeG;AACdX,qBAAO,CAAC,CAAC,IAAD,EAAO,KAAP,CAAD,CADO;AAEdH,qBAAO;AAFO,aAfH;;;AAoBb,gBAAI,CAAC,CAACL,IAAIoB,IAAJ,CAASC,MAAT,CAAgBC,QAAtB,EAAgC;AAC9BH,wBAAU,OAAV,EAAmB,UAAnB,IAAiC;AAC/BI,qBAAKvB,IAAIoB,IAAJ,CAASC,MAAT,CAAgBC;AADU,eAAjC;AAGD;;AAED,gBAAI,CAAC,CAACtB,IAAIoB,IAAJ,CAASC,MAAT,CAAgBG,aAAtB,EAAqC;AACnCL,wBAAU,OAAV,EAAmB,eAAnB,IAAsC;AACpCM,sBAAMzB,IAAIoB,IAAJ,CAASC,MAAT,CAAgBG;AADc,eAAtC;AAGD;;AAED,gBAAI,CAAC,CAACxB,IAAIoB,IAAJ,CAASC,MAAT,CAAgBK,WAAtB,EAAmC;AACjCP,wBAAU,OAAV,EAAmB,aAAnB,IAAoC;AAClCM,sBAAMzB,IAAIoB,IAAJ,CAASC,MAAT,CAAgBK;AADY,eAApC;AAGD;;AApCY;AAAA,mBAsCgB,iBAAOC,aAAP,CAAqBvB,OAArB,CAA6Be,SAA7B,CAtChB;;AAAA;AAsCPS,0BAtCO;AAwCPC,kBAxCO,GAwCED,eAAeE,GAAf,CAAmB,yBAAiB;AACjD,kBAAMC,+CACDC,cAAcjB,UADb;AAEJkB,4BAAYC,KAAKC,IAAL,CACVlB,oBACEe,cAAcjB,UAAd,CAAyBqB,IAD3B,GAEE,GAHQ;AAFR,gBAAN;AAQA,qBAAOL,iBAAP;AACD,aAVc,CAxCF;AAoDPM,wBApDO,GAoDQR,OAAOS,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACzC,qBAAOA,EAAEP,UAAF,GAAeM,EAAEN,UAAxB;AACD,aAFoB,CApDR;;;AAwDbhC,gBAAIwC,IAAJ,CAASJ,YAAT;;AAxDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeK,oB;;;;SAAAA,oB","file":"searchInsurancePlans.js","sourcesContent":["import models from \"../../../models\";\n\nexport default async function searchInsurancePlans(req, res, next) {\n  const userHealthStatus = await models.patientHealthStatus.findAll({\n    where: {\n      patientId: req.query.patientId\n    },\n    order: [[\"createdAt\", \"DESC\"]]\n  });\n\n  const userTotalHealthRank = userHealthStatus.reduce((acc, element) => {\n    acc += parseInt(element.dataValues.value);\n    return acc;\n  }, 0);\n  \n  const userAvgHealthRank = userTotalHealthRank / userHealthStatus.length;\n\n  let condition = {\n    order: [[\"id\", \"ASC\"]],\n    where: {}\n  };\n\n  if (!!req.body.search.provider) {\n    condition[\"where\"][\"provider\"] = {\n      $eq: req.body.search.provider\n    };\n  }\n\n  if (!!req.body.search.surgery_cover) {\n    condition[\"where\"][\"surgery_cover\"] = {\n      $gte: req.body.search.surgery_cover\n    };\n  }\n\n  if (!!req.body.search.daliy_cover) {\n    condition[\"where\"][\"daliy_cover\"] = {\n      $gte: req.body.search.daliy_cover\n    };\n  }\n\n  const insurancePlans = await models.InsurancePlan.findAll(condition);\n\n  const result = insurancePlans.map(insurancePlan => {\n    const insuranceUserPlan = {\n      ...insurancePlan.dataValues,\n      similarity: Math.ceil(\n        userAvgHealthRank /\n          insurancePlan.dataValues.rank *\n          100\n      )\n    };\n    return insuranceUserPlan;\n  });\n\n  const sortedResult = result.sort((a, b) => {\n    return b.similarity - a.similarity;\n  });\n\n  res.json(sortedResult);\n}\n"]}